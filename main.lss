
main.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .data         00000040  00800200  00000ee8  00000f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00003078  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011c1  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000051d5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000051e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db4  00000000  00000000  00005286  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f0  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  0000652a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00006810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8e  00000000  00000000  00006f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_17>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ee       	ldi	r30, 0xE8	; 232
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 34       	cpi	r26, 0x40	; 64
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 72 07 	jmp	0xee4	; 0xee4 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include "usart.h"
#include <ctype.h>
#include "roomba.h"

int main() {
	initializeButton();
 11a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <initializeButton>
	usart_init();
 11e:	0e 94 39 01 	call	0x272	; 0x272 <usart_init>
	usart_init_roomba();
 122:	0e 94 0c 01 	call	0x218	; 0x218 <usart_init_roomba>
	initializeRoomba();
 126:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <initializeRoomba>
	
	while (1) {	
		receiveRemote();
 12a:	0e 94 18 03 	call	0x630	; 0x630 <receiveRemote>
 12e:	fd cf       	rjmp	.-6      	; 0x12a <main+0x10>

00000130 <my_msleep>:
#include <tools.h>
#include <util/delay_basic.h>
#include "avr/interrupt.h"

void my_msleep(uint16_t ms) {
		for (uint16_t a = 0; a < ms; a++) {
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	61 f0       	breq	.+24     	; 0x14c <my_msleep+0x1c>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 138:	40 ea       	ldi	r20, 0xA0	; 160
 13a:	5f e0       	ldi	r21, 0x0F	; 15
 13c:	fa 01       	movw	r30, r20
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <my_msleep+0xe>
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	c1 f7       	brne	.-16     	; 0x13c <my_msleep+0xc>
 14c:	08 95       	ret

0000014e <initializeTimer>:
			_delay_loop_2(4000);
		}
}

void initializeTimer(uint16_t ms) {
	uint16_t timerval = ms / 1000 * 15625;
 14e:	9c 01       	movw	r18, r24
 150:	36 95       	lsr	r19
 152:	27 95       	ror	r18
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	a5 ec       	ldi	r26, 0xC5	; 197
 15e:	b0 e2       	ldi	r27, 0x20	; 32
 160:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__umulhisi3>
 164:	92 95       	swap	r25
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	89 27       	eor	r24, r25
 16c:	9f 70       	andi	r25, 0x0F	; 15
 16e:	89 27       	eor	r24, r25
 170:	49 e0       	ldi	r20, 0x09	; 9
 172:	5d e3       	ldi	r21, 0x3D	; 61
 174:	84 9f       	mul	r24, r20
 176:	90 01       	movw	r18, r0
 178:	85 9f       	mul	r24, r21
 17a:	30 0d       	add	r19, r0
 17c:	94 9f       	mul	r25, r20
 17e:	30 0d       	add	r19, r0
 180:	11 24       	eor	r1, r1
	
	// Initalize timer with CTC and 1024 as divider
	TCCR1B = CTC_1024;
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	80 93 81 00 	sts	0x0081, r24
	
	OCR1AH = (timerval & 0xFF00) >> 8;
 188:	30 93 89 00 	sts	0x0089, r19
	OCR1AL = (timerval & 0x00FF);
 18c:	20 93 88 00 	sts	0x0088, r18
		
	// Activate interrupts
	TIMSK1 = 0x03;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 6f 00 	sts	0x006F, r24
 196:	08 95       	ret

00000198 <__vector_17>:
}

ISR(TIMER1_COMPA_vect) {
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
	cli();
 1a2:	f8 94       	cli
	// Do stuff when timer caused interrupt
	sei();
 1a4:	78 94       	sei
}
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <concat_bytes>:
 * 		  binary value
 * 
 * \param data high and low byte on [0] and [1] of the array
 * \return the concatenated high and low byte as value
 */
uint16_t concat_bytes(uint8_t *data) {
 1b0:	fc 01       	movw	r30, r24
	uint16_t value = data[0] << 8;
 1b2:	80 81       	ld	r24, Z
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	98 2f       	mov	r25, r24
 1b8:	88 27       	eor	r24, r24
	value |= data[1];
 1ba:	21 81       	ldd	r18, Z+1	; 0x01
	
	return value;
}
 1bc:	82 2b       	or	r24, r18
 1be:	08 95       	ret

000001c0 <initializeButton>:
#include "button.h"
#include "tools.h"

void initializeButton() {
	// Set pull up resistor
	PORTB = (1 << PORTB4);
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	85 b9       	out	0x05, r24	; 5
	PORTH = (1 << PORTH6);
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	80 93 02 01 	sts	0x0102, r24
 1ca:	08 95       	ret

000001cc <button_pressed>:
}

uint8_t button_pressed(uint8_t button) {
	// If bitmask says that both buttons should be pressed
	if (button == SW12_PRESSED && (PINB & button) == 0x00 && (PINH & button) == 0x00) {
 1cc:	93 b1       	in	r25, 0x03	; 3
 1ce:	98 23       	and	r25, r24
 1d0:	21 f4       	brne	.+8      	; 0x1da <button_pressed+0xe>
 1d2:	90 91 00 01 	lds	r25, 0x0100
 1d6:	98 23       	and	r25, r24
 1d8:	91 f0       	breq	.+36     	; 0x1fe <button_pressed+0x32>
		return 1;
	} else if (button == (1 << PORTB4) && (PINB & button) == 0x00) {
 1da:	80 31       	cpi	r24, 0x10	; 16
 1dc:	31 f4       	brne	.+12     	; 0x1ea <button_pressed+0x1e>
 1de:	83 b1       	in	r24, 0x03	; 3
 1e0:	82 95       	swap	r24
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	89 27       	eor	r24, r25
 1e8:	08 95       	ret
		return 1;
	} else if (button == (1 << PORTH6) && (PINH & button) == 0x00) {
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	51 f4       	brne	.+20     	; 0x202 <button_pressed+0x36>
 1ee:	80 91 00 01 	lds	r24, 0x0100
 1f2:	86 fb       	bst	r24, 6
 1f4:	88 27       	eor	r24, r24
 1f6:	80 f9       	bld	r24, 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	89 27       	eor	r24, r25
 1fc:	08 95       	ret
}

uint8_t button_pressed(uint8_t button) {
	// If bitmask says that both buttons should be pressed
	if (button == SW12_PRESSED && (PINB & button) == 0x00 && (PINH & button) == 0x00) {
		return 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret
		return 1;
	} else if (button == (1 << PORTH6) && (PINH & button) == 0x00) {
		return 1;
	} 
	
	return 0;
 202:	80 e0       	ldi	r24, 0x00	; 0
}
 204:	08 95       	ret

00000206 <button_wait>:

void button_wait(uint8_t button) {
 206:	cf 93       	push	r28
 208:	c8 2f       	mov	r28, r24
	uint8_t flag = 1;
	
	while (flag) {
		if (button_pressed(button)) {
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <button_pressed>
 210:	88 23       	and	r24, r24
 212:	d9 f3       	breq	.-10     	; 0x20a <button_wait+0x4>
			flag = 0;
		}
	}
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <usart_init_roomba>:
#include "usart.h"
#include "tools.h"

void usart_init_roomba() {
	// Baudrate
	UBRR3L = 0x10;
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	80 93 34 01 	sts	0x0134, r24
	UBRR3H = 0x00;
 21e:	10 92 35 01 	sts	0x0135, r1
	
	// Double speed
	UCSR3A |= (1 << U2X3);
 222:	e0 e3       	ldi	r30, 0x30	; 48
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	80 81       	ld	r24, Z
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	80 83       	st	Z, r24
	
	// Enable receiver and transmitter
	UCSR3B |= (1 << RXEN3) | (1 << TXEN3);
 22c:	e1 e3       	ldi	r30, 0x31	; 49
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	80 81       	ld	r24, Z
 232:	88 61       	ori	r24, 0x18	; 24
 234:	80 83       	st	Z, r24
		
	// Set character size
	UCSR3B &= ~(0 << UCSZ32);
 236:	80 81       	ld	r24, Z
 238:	80 83       	st	Z, r24
	UCSR3C |= (1 << UCSZ31) | (1 << UCSZ30);
 23a:	e2 e3       	ldi	r30, 0x32	; 50
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	80 81       	ld	r24, Z
 240:	86 60       	ori	r24, 0x06	; 6
 242:	80 83       	st	Z, r24
	
	// Set ansychronous
	UCSR3C &= ~(0 << UMSEL31) & ~(0 << UMSEL30);
 244:	80 81       	ld	r24, Z
 246:	80 83       	st	Z, r24
	
	// No parity
	UCSR3C &= ~(0 << UPM31) & ~(0 << UPM30);
 248:	80 81       	ld	r24, Z
 24a:	80 83       	st	Z, r24
	
	// 1 Stop bit
	UCSR3C &= ~(0 << USBS3);	
 24c:	80 81       	ld	r24, Z
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <send_byte_roomba>:
}

void send_byte_roomba(uint8_t byte) {	
	while (!(UCSR3A & (1 << UDRE3)));
 252:	e0 e3       	ldi	r30, 0x30	; 48
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <send_byte_roomba+0x4>
	
	UDR3 = byte;
 25c:	80 93 36 01 	sts	0x0136, r24
 260:	08 95       	ret

00000262 <receive_byte_roomba>:
}

uint8_t receive_byte_roomba() {
	while(!(UCSR3A & (1 << RXC3)));
 262:	e0 e3       	ldi	r30, 0x30	; 48
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	ec f7       	brge	.-6      	; 0x266 <receive_byte_roomba+0x4>
	
	return UDR3;
 26c:	80 91 36 01 	lds	r24, 0x0136
}
 270:	08 95       	ret

00000272 <usart_init>:

void usart_init() {
	// Baudrate
	UBRR0L = 0x10;
 272:	80 e1       	ldi	r24, 0x10	; 16
 274:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;
 278:	10 92 c5 00 	sts	0x00C5, r1
	
	// Double speed
	UCSR0A |= (1 << U2X0);
 27c:	e0 ec       	ldi	r30, 0xC0	; 192
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
	
	// Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 286:	e1 ec       	ldi	r30, 0xC1	; 193
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 61       	ori	r24, 0x18	; 24
 28e:	80 83       	st	Z, r24
		
	// Set character size
	UCSR0B |= (0 << UCSZ02);
 290:	80 81       	ld	r24, Z
 292:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 294:	e2 ec       	ldi	r30, 0xC2	; 194
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	86 60       	ori	r24, 0x06	; 6
 29c:	80 83       	st	Z, r24
	
	// Set ansychronous
	UCSR0C |= (0 << UMSEL01) | (0 << UMSEL00);
 29e:	80 81       	ld	r24, Z
 2a0:	80 83       	st	Z, r24
	
	// No parity
	UCSR0C |= (0 << UPM01) | (0 << UPM00);
 2a2:	80 81       	ld	r24, Z
 2a4:	80 83       	st	Z, r24
	
	// 1 Stop bit
	UCSR0C |= (0 << USBS0);	
 2a6:	80 81       	ld	r24, Z
 2a8:	80 83       	st	Z, r24
 2aa:	08 95       	ret

000002ac <send_byte>:
}

void send_byte(uint8_t byte) {	
	while (!(UCSR0A & (1 << UDRE0)));
 2ac:	e0 ec       	ldi	r30, 0xC0	; 192
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	90 81       	ld	r25, Z
 2b2:	95 ff       	sbrs	r25, 5
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <send_byte+0x4>
	
	UDR0 = byte;
 2b6:	80 93 c6 00 	sts	0x00C6, r24
 2ba:	08 95       	ret

000002bc <receive_byte>:
}

uint8_t receive_byte() {
	while(!(UCSR0A & (1 << RXC0)));
 2bc:	e0 ec       	ldi	r30, 0xC0	; 192
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	ec f7       	brge	.-6      	; 0x2c0 <receive_byte+0x4>
	
	return UDR0;
 2c6:	80 91 c6 00 	lds	r24, 0x00C6
}
 2ca:	08 95       	ret

000002cc <sendString>:
/**
 * \brief Sends a string to the screen terminal
 * 
 * \param string the string to write on the output
 */
void sendString(char * string) {
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
	uint8_t a = 0;
	
	while(string[a] != '\0') {
 2d4:	88 81       	ld	r24, Y
 2d6:	88 23       	and	r24, r24
 2d8:	51 f0       	breq	.+20     	; 0x2ee <sendString+0x22>
 * \brief Sends a string to the screen terminal
 * 
 * \param string the string to write on the output
 */
void sendString(char * string) {
	uint8_t a = 0;
 2da:	10 e0       	ldi	r17, 0x00	; 0
	
	while(string[a] != '\0') {
		send_byte(string[a]);
 2dc:	0e 94 56 01 	call	0x2ac	; 0x2ac <send_byte>
		
		a++;
 2e0:	1f 5f       	subi	r17, 0xFF	; 255
 * \param string the string to write on the output
 */
void sendString(char * string) {
	uint8_t a = 0;
	
	while(string[a] != '\0') {
 2e2:	fe 01       	movw	r30, r28
 2e4:	e1 0f       	add	r30, r17
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 81       	ld	r24, Z
 2ea:	81 11       	cpse	r24, r1
 2ec:	f7 cf       	rjmp	.-18     	; 0x2dc <sendString+0x10>
		send_byte(string[a]);
		
		a++;
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	08 95       	ret

000002f6 <initializeRoomba>:
#include "roomba.h"
#include "usart.h"

void initializeRoomba(void) {
	// Start command
	send_byte_roomba(128);
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
		
	// Save mode
	send_byte_roomba(131);
 2fc:	83 e8       	ldi	r24, 0x83	; 131
 2fe:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
 302:	08 95       	ret

00000304 <set_Display>:
}

void set_Display(uint8_t *data) {
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	08 2f       	mov	r16, r24
 30e:	19 2f       	mov	r17, r25
	send_byte_roomba(164);
 310:	84 ea       	ldi	r24, 0xA4	; 164
 312:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
 316:	c0 2f       	mov	r28, r16
 318:	d1 2f       	mov	r29, r17
	
	uint8_t a = 0;
 31a:	10 e0       	ldi	r17, 0x00	; 0
	while (a < 4) {
		send_byte_roomba(data[a]);
 31c:	89 91       	ld	r24, Y+
 31e:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
		a++;
 322:	1f 5f       	subi	r17, 0xFF	; 255

void set_Display(uint8_t *data) {
	send_byte_roomba(164);
	
	uint8_t a = 0;
	while (a < 4) {
 324:	14 30       	cpi	r17, 0x04	; 4
 326:	d1 f7       	brne	.-12     	; 0x31c <set_Display+0x18>
		send_byte_roomba(data[a]);
		a++;
	}
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <read_button>:
 * \brief Find out if a button on the roomba was pressed
 * 
 * \param button a constant fromm roomba.h e.g HOUR
 * \return 0 if button was not pressed, 1 instead
 */
uint8_t read_button(uint8_t button) {
 332:	cf 93       	push	r28
 334:	c8 2f       	mov	r28, r24
	// Get sensor packets
	send_byte_roomba(142);
 336:	8e e8       	ldi	r24, 0x8E	; 142
 338:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	// Buttons
	send_byte_roomba(18); 
 33c:	82 e1       	ldi	r24, 0x12	; 18
 33e:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	uint8_t result = receive_byte_roomba();
 342:	0e 94 31 01 	call	0x262	; 0x262 <receive_byte_roomba>
	
	if ((result & button) == button) {
 346:	98 2f       	mov	r25, r24
 348:	9c 23       	and	r25, r28
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	c9 13       	cpse	r28, r25
 34e:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}
	
	return 0;
}
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <read_values>:
 * 
 * \param packetid the packetid corresponding to the sensor
 * \param data an array where the returned bytes are stored
 * \param length how many bytes should be retrieved
 */
void read_values(uint8_t packetid, uint8_t * data, uint8_t length) {
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	c8 2f       	mov	r28, r24
 360:	f6 2e       	mov	r15, r22
 362:	17 2f       	mov	r17, r23
 364:	04 2f       	mov	r16, r20
	send_byte_roomba(142);
 366:	8e e8       	ldi	r24, 0x8E	; 142
 368:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	send_byte_roomba(packetid);
 36c:	8c 2f       	mov	r24, r28
 36e:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	for (uint8_t a = 0; a < length; a++) {
 372:	00 23       	and	r16, r16
 374:	49 f0       	breq	.+18     	; 0x388 <read_values+0x34>
 376:	cf 2d       	mov	r28, r15
 378:	d1 2f       	mov	r29, r17
 37a:	10 e0       	ldi	r17, 0x00	; 0
		data[a] = receive_byte_roomba();
 37c:	0e 94 31 01 	call	0x262	; 0x262 <receive_byte_roomba>
 380:	89 93       	st	Y+, r24
 */
void read_values(uint8_t packetid, uint8_t * data, uint8_t length) {
	send_byte_roomba(142);
	send_byte_roomba(packetid);
	
	for (uint8_t a = 0; a < length; a++) {
 382:	1f 5f       	subi	r17, 0xFF	; 255
 384:	10 13       	cpse	r17, r16
 386:	fa cf       	rjmp	.-12     	; 0x37c <read_values+0x28>
		data[a] = receive_byte_roomba();
	}
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	08 95       	ret

00000394 <drive>:
/**
 * \brief Let the roomba drive
 * 
 * \param velocity the velocity in mm/s. If negative --> backwards
 */
void drive(int16_t velocity) {
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	c8 2f       	mov	r28, r24
 39a:	d9 2f       	mov	r29, r25
	send_byte_roomba(145);
 39c:	81 e9       	ldi	r24, 0x91	; 145
 39e:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	uint8_t low = velocity;
	uint8_t high = (velocity >> 8);
	
	send_byte_roomba(high);
 3a2:	8d 2f       	mov	r24, r29
 3a4:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	send_byte_roomba(low);
 3a8:	8c 2f       	mov	r24, r28
 3aa:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	send_byte_roomba(high);
 3ae:	8d 2f       	mov	r24, r29
 3b0:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	send_byte_roomba(low);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <stop>:

/**
 * Stop the roomba
 */
void stop() {
	drive(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 ca 01 	call	0x394	; 0x394 <drive>
 3c8:	08 95       	ret

000003ca <getTicks>:

/**
 * \brief Get the actual tick count for the left wheel
 * 			(at the moment enough, as long as we only drive straight)
 */
uint16_t getTicks() {
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	1f 92       	push	r1
 3d0:	1f 92       	push	r1
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[2];
	read_values(43, data, 2);
 3d6:	42 e0       	ldi	r20, 0x02	; 2
 3d8:	be 01       	movw	r22, r28
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	8b e2       	ldi	r24, 0x2B	; 43
 3e0:	0e 94 aa 01 	call	0x354	; 0x354 <read_values>
	
	return concat_bytes(data);
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <concat_bytes>
}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <drive_roomba>:
 * \brief Drive the roomba
 * 
 * \param distance so far
 * \param velocity with this velocity
 */
void drive_roomba(uint16_t distance, int16_t velocity) {
 3f6:	af 92       	push	r10
 3f8:	bf 92       	push	r11
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	e2 97       	sbiw	r28, 0x32	; 50
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	5c 01       	movw	r10, r24
 41c:	6b 01       	movw	r12, r22
	// Start tick
	char buff[50];
	uint16_t start_value = getTicks();
 41e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTicks>
 422:	7c 01       	movw	r14, r24
	sprintf(buff, "Ticks-Start: %u\r\n\0", start_value);
 424:	ff 92       	push	r15
 426:	8f 93       	push	r24
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	8e 01       	movw	r16, r28
 432:	0f 5f       	subi	r16, 0xFF	; 255
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	1f 93       	push	r17
 438:	0f 93       	push	r16
 43a:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	sendString(buff);
 43e:	c8 01       	movw	r24, r16
 440:	0e 94 66 01 	call	0x2cc	; 0x2cc <sendString>
	
	drive(velocity);
 444:	c6 01       	movw	r24, r12
 446:	0e 94 ca 01 	call	0x394	; 0x394 <drive>
	
	uint16_t sleep = distance / abs(velocity);
 44a:	b6 01       	movw	r22, r12
 44c:	dd 20       	and	r13, r13
 44e:	24 f4       	brge	.+8      	; 0x458 <drive_roomba+0x62>
 450:	66 27       	eor	r22, r22
 452:	77 27       	eor	r23, r23
 454:	6c 19       	sub	r22, r12
 456:	7d 09       	sbc	r23, r13
 458:	c5 01       	movw	r24, r10
 45a:	0e 94 8e 04 	call	0x91c	; 0x91c <__udivmodhi4>
	my_msleep(sleep * 1000);
 45e:	88 ee       	ldi	r24, 0xE8	; 232
 460:	93 e0       	ldi	r25, 0x03	; 3
 462:	9c 01       	movw	r18, r24
 464:	62 9f       	mul	r22, r18
 466:	c0 01       	movw	r24, r0
 468:	63 9f       	mul	r22, r19
 46a:	90 0d       	add	r25, r0
 46c:	72 9f       	mul	r23, r18
 46e:	90 0d       	add	r25, r0
 470:	11 24       	eor	r1, r1
 472:	0e 94 98 00 	call	0x130	; 0x130 <my_msleep>
	
	stop();
 476:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <stop>
	
	uint16_t end_value = getTicks();
 47a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTicks>
 47e:	6c 01       	movw	r12, r24
	sprintf(buff, "Ticks-End: %u\r\n\0", end_value);
 480:	df 92       	push	r13
 482:	8f 93       	push	r24
 484:	83 e1       	ldi	r24, 0x13	; 19
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	9f 93       	push	r25
 48a:	8f 93       	push	r24
 48c:	8e 01       	movw	r16, r28
 48e:	0f 5f       	subi	r16, 0xFF	; 255
 490:	1f 4f       	sbci	r17, 0xFF	; 255
 492:	1f 93       	push	r17
 494:	0f 93       	push	r16
 496:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	sendString(buff);
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 66 01 	call	0x2cc	; 0x2cc <sendString>
	sprintf(buff, "Ticks: %u\r\n\0", (end_value - start_value));
 4a0:	ce 18       	sub	r12, r14
 4a2:	df 08       	sbc	r13, r15
 4a4:	df 92       	push	r13
 4a6:	cf 92       	push	r12
 4a8:	84 e2       	ldi	r24, 0x24	; 36
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	1f 93       	push	r17
 4b2:	0f 93       	push	r16
 4b4:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	sendString(buff);
 4b8:	c8 01       	movw	r24, r16
 4ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <sendString>
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
	
	// 1m = 2262 Ticks
}
 4c8:	e2 96       	adiw	r28, 0x32	; 50
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	bf 90       	pop	r11
 4e6:	af 90       	pop	r10
 4e8:	08 95       	ret

000004ea <drive_roomba_exact>:

/**
 * \brief Does the same like drive_roomba but more exact with counting ticks
 */
void drive_roomba_exact(uint16_t distance, int16_t velocity) {
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	e2 97       	sbiw	r28, 0x32	; 50
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	6c 01       	movw	r12, r24
 50c:	7b 01       	movw	r14, r22
	uint16_t start_value = getTicks();
 50e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTicks>
 512:	8c 01       	movw	r16, r24
	
	drive(velocity);
 514:	c7 01       	movw	r24, r14
 516:	0e 94 ca 01 	call	0x394	; 0x394 <drive>
	
	char buff[50];
	sprintf(buff, "Ticks-Start: %u\r\n\0", start_value);
 51a:	1f 93       	push	r17
 51c:	0f 93       	push	r16
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	32 e0       	ldi	r19, 0x02	; 2
 522:	3f 93       	push	r19
 524:	2f 93       	push	r18
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	7c 01       	movw	r14, r24
 52c:	ff 92       	push	r15
 52e:	8f 93       	push	r24
 530:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	sendString(buff);
 534:	c7 01       	movw	r24, r14
 536:	0e 94 66 01 	call	0x2cc	; 0x2cc <sendString>
	
	uint16_t maxTicks = (uint16_t) (distance * 2.262);
 53a:	b6 01       	movw	r22, r12
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 8e 03 	call	0x71c	; 0x71c <__floatunsisf>
 544:	2c e9       	ldi	r18, 0x9C	; 156
 546:	34 ec       	ldi	r19, 0xC4	; 196
 548:	40 e1       	ldi	r20, 0x10	; 16
 54a:	50 e4       	ldi	r21, 0x40	; 64
 54c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 550:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 554:	c6 2e       	mov	r12, r22
 556:	d7 2e       	mov	r13, r23
	sprintf(buff, "Max: %u\r\n\0", maxTicks);
 558:	7f 93       	push	r23
 55a:	6f 93       	push	r22
 55c:	81 e3       	ldi	r24, 0x31	; 49
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	ff 92       	push	r15
 566:	ef 92       	push	r14
 568:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	sendString(buff);
 56c:	c7 01       	movw	r24, r14
 56e:	0e 94 66 01 	call	0x2cc	; 0x2cc <sendString>
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
		uint16_t ticks = getTicks();
		uint16_t distanceTicks;
		
		// Overflow
		if (ticks < start_value) {
			distanceTicks = 65535 - start_value + ticks;
 57c:	78 01       	movw	r14, r16
 57e:	e0 94       	com	r14
 580:	f0 94       	com	r15
	uint16_t maxTicks = (uint16_t) (distance * 2.262);
	sprintf(buff, "Max: %u\r\n\0", maxTicks);
	sendString(buff);
	
	while (1) {
		uint16_t ticks = getTicks();
 582:	0e 94 e5 01 	call	0x3ca	; 0x3ca <getTicks>
		uint16_t distanceTicks;
		
		// Overflow
		if (ticks < start_value) {
 586:	80 17       	cp	r24, r16
 588:	91 07       	cpc	r25, r17
 58a:	18 f4       	brcc	.+6      	; 0x592 <drive_roomba_exact+0xa8>
			distanceTicks = 65535 - start_value + ticks;
 58c:	8e 0d       	add	r24, r14
 58e:	9f 1d       	adc	r25, r15
 590:	02 c0       	rjmp	.+4      	; 0x596 <drive_roomba_exact+0xac>
		} else {
			distanceTicks = ticks - start_value;
 592:	80 1b       	sub	r24, r16
 594:	91 0b       	sbc	r25, r17
		}
		
		if (distanceTicks > maxTicks) {
 596:	c8 16       	cp	r12, r24
 598:	d9 06       	cpc	r13, r25
 59a:	98 f7       	brcc	.-26     	; 0x582 <drive_roomba_exact+0x98>
			break;
		}
	}
	
	stop();
 59c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <stop>
}
 5a0:	e2 96       	adiw	r28, 0x32	; 50
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	08 95       	ret

000005be <intToHex>:

/**
 * \brief Convert a integer to a hex value
 */
void intToHex(uint16_t hex, char *result) {
	sprintf(result, "%x", hex);
 5be:	9f 93       	push	r25
 5c0:	8f 93       	push	r24
 5c2:	8c e3       	ldi	r24, 0x3C	; 60
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	9f 93       	push	r25
 5c8:	8f 93       	push	r24
 5ca:	7f 93       	push	r23
 5cc:	6f 93       	push	r22
 5ce:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	08 95       	ret

000005e0 <showRemoteSignalInDisplay>:
/**
 * \brief Show the pressed remote button hex code on display
 * 
 * \param data the received button code
 */
void showRemoteSignalInDisplay(char *data) {
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	28 97       	sbiw	r28, 0x08	; 8
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
	if (data == 0) {
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	51 f4       	brne	.+20     	; 0x60c <showRemoteSignalInDisplay+0x2c>
		char empty[4] = {' ', ' ', ' ', ' '};
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	8d 83       	std	Y+5, r24	; 0x05
 5fc:	8e 83       	std	Y+6, r24	; 0x06
 5fe:	8f 83       	std	Y+7, r24	; 0x07
 600:	88 87       	std	Y+8, r24	; 0x08
		set_Display(empty);
 602:	ce 01       	movw	r24, r28
 604:	05 96       	adiw	r24, 0x05	; 5
 606:	0e 94 82 01 	call	0x304	; 0x304 <set_Display>
 60a:	09 c0       	rjmp	.+18     	; 0x61e <showRemoteSignalInDisplay+0x3e>
		
		return;
	}
	
	char result[4];
	intToHex(data, result);
 60c:	be 01       	movw	r22, r28
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	0e 94 df 02 	call	0x5be	; 0x5be <intToHex>
	
	set_Display(result);
 616:	ce 01       	movw	r24, r28
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	0e 94 82 01 	call	0x304	; 0x304 <set_Display>
}
 61e:	28 96       	adiw	r28, 0x08	; 8
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <receiveRemote>:
/**
 * \brief Receive a signal from the remote. Show the received
 * 			value as hex on Display and drive corresponding
 * 			to the steering buttons
 */
void receiveRemote() {
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	1f 92       	push	r1
 636:	1f 92       	push	r1
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[2];
	read_values(17, data, 1);
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	be 01       	movw	r22, r28
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	81 e1       	ldi	r24, 0x11	; 17
 646:	0e 94 aa 01 	call	0x354	; 0x354 <read_values>
	
	showRemoteSignalInDisplay(data[0]);
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <showRemoteSignalInDisplay>
}
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <driveWithRadius>:
 * 
 * \param velocity this velocity
 * \param radius this radius (use DRIVE_STRAIGHT for straight, -1 for 
 * 			clockwise 1 for anticlockwise)
 */
void driveWithRadius(uint16_t velocity, uint16_t radius) {
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	18 2f       	mov	r17, r24
 666:	09 2f       	mov	r16, r25
 668:	c6 2f       	mov	r28, r22
 66a:	d7 2f       	mov	r29, r23
	send_byte_roomba(137);
 66c:	89 e8       	ldi	r24, 0x89	; 137
 66e:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	uint8_t low = velocity;
	uint8_t high = (velocity >> 8);
	
	send_byte_roomba(high);
 672:	80 2f       	mov	r24, r16
 674:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	send_byte_roomba(low);	
 678:	81 2f       	mov	r24, r17
 67a:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	
	uint8_t rlow = radius;
	uint8_t rhigh = (radius >> 8);
	
	send_byte_roomba(rhigh);
 67e:	8d 2f       	mov	r24, r29
 680:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
	send_byte_roomba(rlow);	
 684:	8c 2f       	mov	r24, r28
 686:	0e 94 29 01 	call	0x252	; 0x252 <send_byte_roomba>
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <read_user_input>:

/**
 * TODO
 */
uint16_t read_user_input() {
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	00 d0       	rcall	.+0      	; 0x69a <read_user_input+0x6>
 69a:	1f 92       	push	r1
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	char awaitInput[4] = {'-', '-', '-', '-'};
 6a0:	8d e2       	ldi	r24, 0x2D	; 45
 6a2:	89 83       	std	Y+1, r24	; 0x01
 6a4:	8a 83       	std	Y+2, r24	; 0x02
 6a6:	8b 83       	std	Y+3, r24	; 0x03
 6a8:	8c 83       	std	Y+4, r24	; 0x04
	set_Display(awaitInput);
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 82 01 	call	0x304	; 0x304 <set_Display>
	
	return 0;
}
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <__fixunssfsi>:
 6c4:	70 d0       	rcall	.+224    	; 0x7a6 <__fp_splitA>
 6c6:	88 f0       	brcs	.+34     	; 0x6ea <__fixunssfsi+0x26>
 6c8:	9f 57       	subi	r25, 0x7F	; 127
 6ca:	90 f0       	brcs	.+36     	; 0x6f0 <__fixunssfsi+0x2c>
 6cc:	b9 2f       	mov	r27, r25
 6ce:	99 27       	eor	r25, r25
 6d0:	b7 51       	subi	r27, 0x17	; 23
 6d2:	a0 f0       	brcs	.+40     	; 0x6fc <__fixunssfsi+0x38>
 6d4:	d1 f0       	breq	.+52     	; 0x70a <__fixunssfsi+0x46>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a f0       	brmi	.+6      	; 0x6e6 <__fixunssfsi+0x22>
 6e0:	ba 95       	dec	r27
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__fixunssfsi+0x12>
 6e4:	12 c0       	rjmp	.+36     	; 0x70a <__fixunssfsi+0x46>
 6e6:	b1 30       	cpi	r27, 0x01	; 1
 6e8:	81 f0       	breq	.+32     	; 0x70a <__fixunssfsi+0x46>
 6ea:	77 d0       	rcall	.+238    	; 0x7da <__fp_zero>
 6ec:	b1 e0       	ldi	r27, 0x01	; 1
 6ee:	08 95       	ret
 6f0:	74 c0       	rjmp	.+232    	; 0x7da <__fp_zero>
 6f2:	67 2f       	mov	r22, r23
 6f4:	78 2f       	mov	r23, r24
 6f6:	88 27       	eor	r24, r24
 6f8:	b8 5f       	subi	r27, 0xF8	; 248
 6fa:	39 f0       	breq	.+14     	; 0x70a <__fixunssfsi+0x46>
 6fc:	b9 3f       	cpi	r27, 0xF9	; 249
 6fe:	cc f3       	brlt	.-14     	; 0x6f2 <__fixunssfsi+0x2e>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b3 95       	inc	r27
 708:	d9 f7       	brne	.-10     	; 0x700 <__fixunssfsi+0x3c>
 70a:	3e f4       	brtc	.+14     	; 0x71a <__fixunssfsi+0x56>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__floatunsisf>:
 71c:	e8 94       	clt
 71e:	09 c0       	rjmp	.+18     	; 0x732 <__floatsisf+0x12>

00000720 <__floatsisf>:
 720:	97 fb       	bst	r25, 7
 722:	3e f4       	brtc	.+14     	; 0x732 <__floatsisf+0x12>
 724:	90 95       	com	r25
 726:	80 95       	com	r24
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	99 23       	and	r25, r25
 734:	a9 f0       	breq	.+42     	; 0x760 <__floatsisf+0x40>
 736:	f9 2f       	mov	r31, r25
 738:	96 e9       	ldi	r25, 0x96	; 150
 73a:	bb 27       	eor	r27, r27
 73c:	93 95       	inc	r25
 73e:	f6 95       	lsr	r31
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f1 11       	cpse	r31, r1
 74a:	f8 cf       	rjmp	.-16     	; 0x73c <__floatsisf+0x1c>
 74c:	fa f4       	brpl	.+62     	; 0x78c <__floatsisf+0x6c>
 74e:	bb 0f       	add	r27, r27
 750:	11 f4       	brne	.+4      	; 0x756 <__floatsisf+0x36>
 752:	60 ff       	sbrs	r22, 0
 754:	1b c0       	rjmp	.+54     	; 0x78c <__floatsisf+0x6c>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	16 c0       	rjmp	.+44     	; 0x78c <__floatsisf+0x6c>
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <__floatsisf+0x48>
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	11 c0       	rjmp	.+34     	; 0x78a <__floatsisf+0x6a>
 768:	77 23       	and	r23, r23
 76a:	21 f0       	breq	.+8      	; 0x774 <__floatsisf+0x54>
 76c:	9e e8       	ldi	r25, 0x8E	; 142
 76e:	87 2f       	mov	r24, r23
 770:	76 2f       	mov	r23, r22
 772:	05 c0       	rjmp	.+10     	; 0x77e <__floatsisf+0x5e>
 774:	66 23       	and	r22, r22
 776:	71 f0       	breq	.+28     	; 0x794 <__floatsisf+0x74>
 778:	96 e8       	ldi	r25, 0x86	; 134
 77a:	86 2f       	mov	r24, r22
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	2a f0       	brmi	.+10     	; 0x78c <__floatsisf+0x6c>
 782:	9a 95       	dec	r25
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	da f7       	brpl	.-10     	; 0x782 <__floatsisf+0x62>
 78c:	88 0f       	add	r24, r24
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <__fp_split3>:
 796:	57 fd       	sbrc	r21, 7
 798:	90 58       	subi	r25, 0x80	; 128
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	59 f0       	breq	.+22     	; 0x7b6 <__fp_splitA+0x10>
 7a0:	5f 3f       	cpi	r21, 0xFF	; 255
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__fp_splitA+0x1a>
 7a4:	47 95       	ror	r20

000007a6 <__fp_splitA>:
 7a6:	88 0f       	add	r24, r24
 7a8:	97 fb       	bst	r25, 7
 7aa:	99 1f       	adc	r25, r25
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <__fp_splitA+0x20>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <__fp_splitA+0x2a>
 7b2:	87 95       	ror	r24
 7b4:	08 95       	ret
 7b6:	12 16       	cp	r1, r18
 7b8:	13 06       	cpc	r1, r19
 7ba:	14 06       	cpc	r1, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	f2 cf       	rjmp	.-28     	; 0x7a4 <__fp_split3+0xe>
 7c0:	46 95       	lsr	r20
 7c2:	f1 df       	rcall	.-30     	; 0x7a6 <__fp_splitA>
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <__fp_splitA+0x30>
 7c6:	16 16       	cp	r1, r22
 7c8:	17 06       	cpc	r1, r23
 7ca:	18 06       	cpc	r1, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	f1 cf       	rjmp	.-30     	; 0x7b2 <__fp_splitA+0xc>
 7d0:	86 95       	lsr	r24
 7d2:	71 05       	cpc	r23, r1
 7d4:	61 05       	cpc	r22, r1
 7d6:	08 94       	sec
 7d8:	08 95       	ret

000007da <__fp_zero>:
 7da:	e8 94       	clt

000007dc <__fp_szero>:
 7dc:	bb 27       	eor	r27, r27
 7de:	66 27       	eor	r22, r22
 7e0:	77 27       	eor	r23, r23
 7e2:	cb 01       	movw	r24, r22
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__mulsf3>:
 7e8:	0b d0       	rcall	.+22     	; 0x800 <__mulsf3x>
 7ea:	78 c0       	rjmp	.+240    	; 0x8dc <__fp_round>
 7ec:	69 d0       	rcall	.+210    	; 0x8c0 <__fp_pscA>
 7ee:	28 f0       	brcs	.+10     	; 0x7fa <__mulsf3+0x12>
 7f0:	6e d0       	rcall	.+220    	; 0x8ce <__fp_pscB>
 7f2:	18 f0       	brcs	.+6      	; 0x7fa <__mulsf3+0x12>
 7f4:	95 23       	and	r25, r21
 7f6:	09 f0       	breq	.+2      	; 0x7fa <__mulsf3+0x12>
 7f8:	5a c0       	rjmp	.+180    	; 0x8ae <__fp_inf>
 7fa:	5f c0       	rjmp	.+190    	; 0x8ba <__fp_nan>
 7fc:	11 24       	eor	r1, r1
 7fe:	ee cf       	rjmp	.-36     	; 0x7dc <__fp_szero>

00000800 <__mulsf3x>:
 800:	ca df       	rcall	.-108    	; 0x796 <__fp_split3>
 802:	a0 f3       	brcs	.-24     	; 0x7ec <__mulsf3+0x4>

00000804 <__mulsf3_pse>:
 804:	95 9f       	mul	r25, r21
 806:	d1 f3       	breq	.-12     	; 0x7fc <__mulsf3+0x14>
 808:	95 0f       	add	r25, r21
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	55 1f       	adc	r21, r21
 80e:	62 9f       	mul	r22, r18
 810:	f0 01       	movw	r30, r0
 812:	72 9f       	mul	r23, r18
 814:	bb 27       	eor	r27, r27
 816:	f0 0d       	add	r31, r0
 818:	b1 1d       	adc	r27, r1
 81a:	63 9f       	mul	r22, r19
 81c:	aa 27       	eor	r26, r26
 81e:	f0 0d       	add	r31, r0
 820:	b1 1d       	adc	r27, r1
 822:	aa 1f       	adc	r26, r26
 824:	64 9f       	mul	r22, r20
 826:	66 27       	eor	r22, r22
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	66 1f       	adc	r22, r22
 82e:	82 9f       	mul	r24, r18
 830:	22 27       	eor	r18, r18
 832:	b0 0d       	add	r27, r0
 834:	a1 1d       	adc	r26, r1
 836:	62 1f       	adc	r22, r18
 838:	73 9f       	mul	r23, r19
 83a:	b0 0d       	add	r27, r0
 83c:	a1 1d       	adc	r26, r1
 83e:	62 1f       	adc	r22, r18
 840:	83 9f       	mul	r24, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	22 1f       	adc	r18, r18
 848:	74 9f       	mul	r23, r20
 84a:	33 27       	eor	r19, r19
 84c:	a0 0d       	add	r26, r0
 84e:	61 1d       	adc	r22, r1
 850:	23 1f       	adc	r18, r19
 852:	84 9f       	mul	r24, r20
 854:	60 0d       	add	r22, r0
 856:	21 1d       	adc	r18, r1
 858:	82 2f       	mov	r24, r18
 85a:	76 2f       	mov	r23, r22
 85c:	6a 2f       	mov	r22, r26
 85e:	11 24       	eor	r1, r1
 860:	9f 57       	subi	r25, 0x7F	; 127
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	8a f0       	brmi	.+34     	; 0x888 <__mulsf3_pse+0x84>
 866:	e1 f0       	breq	.+56     	; 0x8a0 <__mulsf3_pse+0x9c>
 868:	88 23       	and	r24, r24
 86a:	4a f0       	brmi	.+18     	; 0x87e <__mulsf3_pse+0x7a>
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	bb 1f       	adc	r27, r27
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	a9 f7       	brne	.-22     	; 0x868 <__mulsf3_pse+0x64>
 87e:	9e 3f       	cpi	r25, 0xFE	; 254
 880:	51 05       	cpc	r21, r1
 882:	70 f0       	brcs	.+28     	; 0x8a0 <__mulsf3_pse+0x9c>
 884:	14 c0       	rjmp	.+40     	; 0x8ae <__fp_inf>
 886:	aa cf       	rjmp	.-172    	; 0x7dc <__fp_szero>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	ec f3       	brlt	.-6      	; 0x886 <__mulsf3_pse+0x82>
 88c:	98 3e       	cpi	r25, 0xE8	; 232
 88e:	dc f3       	brlt	.-10     	; 0x886 <__mulsf3_pse+0x82>
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b7 95       	ror	r27
 898:	f7 95       	ror	r31
 89a:	e7 95       	ror	r30
 89c:	9f 5f       	subi	r25, 0xFF	; 255
 89e:	c1 f7       	brne	.-16     	; 0x890 <__mulsf3_pse+0x8c>
 8a0:	fe 2b       	or	r31, r30
 8a2:	88 0f       	add	r24, r24
 8a4:	91 1d       	adc	r25, r1
 8a6:	96 95       	lsr	r25
 8a8:	87 95       	ror	r24
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__fp_inf>:
 8ae:	97 f9       	bld	r25, 7
 8b0:	9f 67       	ori	r25, 0x7F	; 127
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	08 95       	ret

000008ba <__fp_nan>:
 8ba:	9f ef       	ldi	r25, 0xFF	; 255
 8bc:	80 ec       	ldi	r24, 0xC0	; 192
 8be:	08 95       	ret

000008c0 <__fp_pscA>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	09 06       	cpc	r0, r25
 8cc:	08 95       	ret

000008ce <__fp_pscB>:
 8ce:	00 24       	eor	r0, r0
 8d0:	0a 94       	dec	r0
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	14 06       	cpc	r1, r20
 8d8:	05 06       	cpc	r0, r21
 8da:	08 95       	ret

000008dc <__fp_round>:
 8dc:	09 2e       	mov	r0, r25
 8de:	03 94       	inc	r0
 8e0:	00 0c       	add	r0, r0
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0xc>
 8e4:	88 23       	and	r24, r24
 8e6:	52 f0       	brmi	.+20     	; 0x8fc <__fp_round+0x20>
 8e8:	bb 0f       	add	r27, r27
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <__fp_round+0x20>
 8ec:	bf 2b       	or	r27, r31
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0x18>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__fp_round+0x20>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__umulhisi3>:
 8fe:	a2 9f       	mul	r26, r18
 900:	b0 01       	movw	r22, r0
 902:	b3 9f       	mul	r27, r19
 904:	c0 01       	movw	r24, r0
 906:	a3 9f       	mul	r26, r19
 908:	70 0d       	add	r23, r0
 90a:	81 1d       	adc	r24, r1
 90c:	11 24       	eor	r1, r1
 90e:	91 1d       	adc	r25, r1
 910:	b2 9f       	mul	r27, r18
 912:	70 0d       	add	r23, r0
 914:	81 1d       	adc	r24, r1
 916:	11 24       	eor	r1, r1
 918:	91 1d       	adc	r25, r1
 91a:	08 95       	ret

0000091c <__udivmodhi4>:
 91c:	aa 1b       	sub	r26, r26
 91e:	bb 1b       	sub	r27, r27
 920:	51 e1       	ldi	r21, 0x11	; 17
 922:	07 c0       	rjmp	.+14     	; 0x932 <__udivmodhi4_ep>

00000924 <__udivmodhi4_loop>:
 924:	aa 1f       	adc	r26, r26
 926:	bb 1f       	adc	r27, r27
 928:	a6 17       	cp	r26, r22
 92a:	b7 07       	cpc	r27, r23
 92c:	10 f0       	brcs	.+4      	; 0x932 <__udivmodhi4_ep>
 92e:	a6 1b       	sub	r26, r22
 930:	b7 0b       	sbc	r27, r23

00000932 <__udivmodhi4_ep>:
 932:	88 1f       	adc	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	5a 95       	dec	r21
 938:	a9 f7       	brne	.-22     	; 0x924 <__udivmodhi4_loop>
 93a:	80 95       	com	r24
 93c:	90 95       	com	r25
 93e:	bc 01       	movw	r22, r24
 940:	cd 01       	movw	r24, r26
 942:	08 95       	ret

00000944 <sprintf>:
 944:	0f 93       	push	r16
 946:	1f 93       	push	r17
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	2e 97       	sbiw	r28, 0x0e	; 14
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	0e 89       	ldd	r16, Y+22	; 0x16
 95e:	1f 89       	ldd	r17, Y+23	; 0x17
 960:	86 e0       	ldi	r24, 0x06	; 6
 962:	8c 83       	std	Y+4, r24	; 0x04
 964:	1a 83       	std	Y+2, r17	; 0x02
 966:	09 83       	std	Y+1, r16	; 0x01
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	9f e7       	ldi	r25, 0x7F	; 127
 96c:	9e 83       	std	Y+6, r25	; 0x06
 96e:	8d 83       	std	Y+5, r24	; 0x05
 970:	ae 01       	movw	r20, r28
 972:	46 5e       	subi	r20, 0xE6	; 230
 974:	5f 4f       	sbci	r21, 0xFF	; 255
 976:	68 8d       	ldd	r22, Y+24	; 0x18
 978:	79 8d       	ldd	r23, Y+25	; 0x19
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <vfprintf>
 982:	ef 81       	ldd	r30, Y+7	; 0x07
 984:	f8 85       	ldd	r31, Y+8	; 0x08
 986:	e0 0f       	add	r30, r16
 988:	f1 1f       	adc	r31, r17
 98a:	10 82       	st	Z, r1
 98c:	2e 96       	adiw	r28, 0x0e	; 14
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <vfprintf>:
 9a2:	2f 92       	push	r2
 9a4:	3f 92       	push	r3
 9a6:	4f 92       	push	r4
 9a8:	5f 92       	push	r5
 9aa:	6f 92       	push	r6
 9ac:	7f 92       	push	r7
 9ae:	8f 92       	push	r8
 9b0:	9f 92       	push	r9
 9b2:	af 92       	push	r10
 9b4:	bf 92       	push	r11
 9b6:	cf 92       	push	r12
 9b8:	df 92       	push	r13
 9ba:	ef 92       	push	r14
 9bc:	ff 92       	push	r15
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	2c 97       	sbiw	r28, 0x0c	; 12
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	f8 94       	cli
 9d0:	de bf       	out	0x3e, r29	; 62
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	cd bf       	out	0x3d, r28	; 61
 9d6:	7c 01       	movw	r14, r24
 9d8:	6b 01       	movw	r12, r22
 9da:	8a 01       	movw	r16, r20
 9dc:	fc 01       	movw	r30, r24
 9de:	17 82       	std	Z+7, r1	; 0x07
 9e0:	16 82       	std	Z+6, r1	; 0x06
 9e2:	83 81       	ldd	r24, Z+3	; 0x03
 9e4:	81 ff       	sbrs	r24, 1
 9e6:	bd c1       	rjmp	.+890    	; 0xd62 <vfprintf+0x3c0>
 9e8:	ce 01       	movw	r24, r28
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	4c 01       	movw	r8, r24
 9ee:	f7 01       	movw	r30, r14
 9f0:	93 81       	ldd	r25, Z+3	; 0x03
 9f2:	f6 01       	movw	r30, r12
 9f4:	93 fd       	sbrc	r25, 3
 9f6:	85 91       	lpm	r24, Z+
 9f8:	93 ff       	sbrs	r25, 3
 9fa:	81 91       	ld	r24, Z+
 9fc:	6f 01       	movw	r12, r30
 9fe:	88 23       	and	r24, r24
 a00:	09 f4       	brne	.+2      	; 0xa04 <vfprintf+0x62>
 a02:	ab c1       	rjmp	.+854    	; 0xd5a <vfprintf+0x3b8>
 a04:	85 32       	cpi	r24, 0x25	; 37
 a06:	39 f4       	brne	.+14     	; 0xa16 <vfprintf+0x74>
 a08:	93 fd       	sbrc	r25, 3
 a0a:	85 91       	lpm	r24, Z+
 a0c:	93 ff       	sbrs	r25, 3
 a0e:	81 91       	ld	r24, Z+
 a10:	6f 01       	movw	r12, r30
 a12:	85 32       	cpi	r24, 0x25	; 37
 a14:	29 f4       	brne	.+10     	; 0xa20 <vfprintf+0x7e>
 a16:	b7 01       	movw	r22, r14
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 a1e:	e7 cf       	rjmp	.-50     	; 0x9ee <vfprintf+0x4c>
 a20:	51 2c       	mov	r5, r1
 a22:	31 2c       	mov	r3, r1
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	20 32       	cpi	r18, 0x20	; 32
 a28:	a0 f4       	brcc	.+40     	; 0xa52 <vfprintf+0xb0>
 a2a:	8b 32       	cpi	r24, 0x2B	; 43
 a2c:	69 f0       	breq	.+26     	; 0xa48 <vfprintf+0xa6>
 a2e:	30 f4       	brcc	.+12     	; 0xa3c <vfprintf+0x9a>
 a30:	80 32       	cpi	r24, 0x20	; 32
 a32:	59 f0       	breq	.+22     	; 0xa4a <vfprintf+0xa8>
 a34:	83 32       	cpi	r24, 0x23	; 35
 a36:	69 f4       	brne	.+26     	; 0xa52 <vfprintf+0xb0>
 a38:	20 61       	ori	r18, 0x10	; 16
 a3a:	2c c0       	rjmp	.+88     	; 0xa94 <vfprintf+0xf2>
 a3c:	8d 32       	cpi	r24, 0x2D	; 45
 a3e:	39 f0       	breq	.+14     	; 0xa4e <vfprintf+0xac>
 a40:	80 33       	cpi	r24, 0x30	; 48
 a42:	39 f4       	brne	.+14     	; 0xa52 <vfprintf+0xb0>
 a44:	21 60       	ori	r18, 0x01	; 1
 a46:	26 c0       	rjmp	.+76     	; 0xa94 <vfprintf+0xf2>
 a48:	22 60       	ori	r18, 0x02	; 2
 a4a:	24 60       	ori	r18, 0x04	; 4
 a4c:	23 c0       	rjmp	.+70     	; 0xa94 <vfprintf+0xf2>
 a4e:	28 60       	ori	r18, 0x08	; 8
 a50:	21 c0       	rjmp	.+66     	; 0xa94 <vfprintf+0xf2>
 a52:	27 fd       	sbrc	r18, 7
 a54:	27 c0       	rjmp	.+78     	; 0xaa4 <vfprintf+0x102>
 a56:	30 ed       	ldi	r19, 0xD0	; 208
 a58:	38 0f       	add	r19, r24
 a5a:	3a 30       	cpi	r19, 0x0A	; 10
 a5c:	78 f4       	brcc	.+30     	; 0xa7c <vfprintf+0xda>
 a5e:	26 ff       	sbrs	r18, 6
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <vfprintf+0xcc>
 a62:	fa e0       	ldi	r31, 0x0A	; 10
 a64:	5f 9e       	mul	r5, r31
 a66:	30 0d       	add	r19, r0
 a68:	11 24       	eor	r1, r1
 a6a:	53 2e       	mov	r5, r19
 a6c:	13 c0       	rjmp	.+38     	; 0xa94 <vfprintf+0xf2>
 a6e:	8a e0       	ldi	r24, 0x0A	; 10
 a70:	38 9e       	mul	r3, r24
 a72:	30 0d       	add	r19, r0
 a74:	11 24       	eor	r1, r1
 a76:	33 2e       	mov	r3, r19
 a78:	20 62       	ori	r18, 0x20	; 32
 a7a:	0c c0       	rjmp	.+24     	; 0xa94 <vfprintf+0xf2>
 a7c:	8e 32       	cpi	r24, 0x2E	; 46
 a7e:	21 f4       	brne	.+8      	; 0xa88 <vfprintf+0xe6>
 a80:	26 fd       	sbrc	r18, 6
 a82:	6b c1       	rjmp	.+726    	; 0xd5a <vfprintf+0x3b8>
 a84:	20 64       	ori	r18, 0x40	; 64
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <vfprintf+0xf2>
 a88:	8c 36       	cpi	r24, 0x6C	; 108
 a8a:	11 f4       	brne	.+4      	; 0xa90 <vfprintf+0xee>
 a8c:	20 68       	ori	r18, 0x80	; 128
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <vfprintf+0xf2>
 a90:	88 36       	cpi	r24, 0x68	; 104
 a92:	41 f4       	brne	.+16     	; 0xaa4 <vfprintf+0x102>
 a94:	f6 01       	movw	r30, r12
 a96:	93 fd       	sbrc	r25, 3
 a98:	85 91       	lpm	r24, Z+
 a9a:	93 ff       	sbrs	r25, 3
 a9c:	81 91       	ld	r24, Z+
 a9e:	6f 01       	movw	r12, r30
 aa0:	81 11       	cpse	r24, r1
 aa2:	c1 cf       	rjmp	.-126    	; 0xa26 <vfprintf+0x84>
 aa4:	98 2f       	mov	r25, r24
 aa6:	9f 7d       	andi	r25, 0xDF	; 223
 aa8:	95 54       	subi	r25, 0x45	; 69
 aaa:	93 30       	cpi	r25, 0x03	; 3
 aac:	28 f4       	brcc	.+10     	; 0xab8 <vfprintf+0x116>
 aae:	0c 5f       	subi	r16, 0xFC	; 252
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	ff e3       	ldi	r31, 0x3F	; 63
 ab4:	f9 83       	std	Y+1, r31	; 0x01
 ab6:	0d c0       	rjmp	.+26     	; 0xad2 <vfprintf+0x130>
 ab8:	83 36       	cpi	r24, 0x63	; 99
 aba:	31 f0       	breq	.+12     	; 0xac8 <vfprintf+0x126>
 abc:	83 37       	cpi	r24, 0x73	; 115
 abe:	71 f0       	breq	.+28     	; 0xadc <vfprintf+0x13a>
 ac0:	83 35       	cpi	r24, 0x53	; 83
 ac2:	09 f0       	breq	.+2      	; 0xac6 <vfprintf+0x124>
 ac4:	5b c0       	rjmp	.+182    	; 0xb7c <vfprintf+0x1da>
 ac6:	22 c0       	rjmp	.+68     	; 0xb0c <vfprintf+0x16a>
 ac8:	f8 01       	movw	r30, r16
 aca:	80 81       	ld	r24, Z
 acc:	89 83       	std	Y+1, r24	; 0x01
 ace:	0e 5f       	subi	r16, 0xFE	; 254
 ad0:	1f 4f       	sbci	r17, 0xFF	; 255
 ad2:	44 24       	eor	r4, r4
 ad4:	43 94       	inc	r4
 ad6:	51 2c       	mov	r5, r1
 ad8:	54 01       	movw	r10, r8
 ada:	15 c0       	rjmp	.+42     	; 0xb06 <vfprintf+0x164>
 adc:	38 01       	movw	r6, r16
 ade:	f2 e0       	ldi	r31, 0x02	; 2
 ae0:	6f 0e       	add	r6, r31
 ae2:	71 1c       	adc	r7, r1
 ae4:	f8 01       	movw	r30, r16
 ae6:	a0 80       	ld	r10, Z
 ae8:	b1 80       	ldd	r11, Z+1	; 0x01
 aea:	26 ff       	sbrs	r18, 6
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x152>
 aee:	65 2d       	mov	r22, r5
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <vfprintf+0x156>
 af4:	6f ef       	ldi	r22, 0xFF	; 255
 af6:	7f ef       	ldi	r23, 0xFF	; 255
 af8:	c5 01       	movw	r24, r10
 afa:	2c 87       	std	Y+12, r18	; 0x0c
 afc:	0e 94 d7 06 	call	0xdae	; 0xdae <strnlen>
 b00:	2c 01       	movw	r4, r24
 b02:	83 01       	movw	r16, r6
 b04:	2c 85       	ldd	r18, Y+12	; 0x0c
 b06:	2f 77       	andi	r18, 0x7F	; 127
 b08:	22 2e       	mov	r2, r18
 b0a:	17 c0       	rjmp	.+46     	; 0xb3a <vfprintf+0x198>
 b0c:	38 01       	movw	r6, r16
 b0e:	f2 e0       	ldi	r31, 0x02	; 2
 b10:	6f 0e       	add	r6, r31
 b12:	71 1c       	adc	r7, r1
 b14:	f8 01       	movw	r30, r16
 b16:	a0 80       	ld	r10, Z
 b18:	b1 80       	ldd	r11, Z+1	; 0x01
 b1a:	26 ff       	sbrs	r18, 6
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x182>
 b1e:	65 2d       	mov	r22, r5
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0x186>
 b24:	6f ef       	ldi	r22, 0xFF	; 255
 b26:	7f ef       	ldi	r23, 0xFF	; 255
 b28:	c5 01       	movw	r24, r10
 b2a:	2c 87       	std	Y+12, r18	; 0x0c
 b2c:	0e 94 cc 06 	call	0xd98	; 0xd98 <strnlen_P>
 b30:	2c 01       	movw	r4, r24
 b32:	2c 85       	ldd	r18, Y+12	; 0x0c
 b34:	20 68       	ori	r18, 0x80	; 128
 b36:	22 2e       	mov	r2, r18
 b38:	83 01       	movw	r16, r6
 b3a:	23 fc       	sbrc	r2, 3
 b3c:	1b c0       	rjmp	.+54     	; 0xb74 <vfprintf+0x1d2>
 b3e:	83 2d       	mov	r24, r3
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	48 16       	cp	r4, r24
 b44:	59 06       	cpc	r5, r25
 b46:	b0 f4       	brcc	.+44     	; 0xb74 <vfprintf+0x1d2>
 b48:	b7 01       	movw	r22, r14
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 b52:	3a 94       	dec	r3
 b54:	f4 cf       	rjmp	.-24     	; 0xb3e <vfprintf+0x19c>
 b56:	f5 01       	movw	r30, r10
 b58:	27 fc       	sbrc	r2, 7
 b5a:	85 91       	lpm	r24, Z+
 b5c:	27 fe       	sbrs	r2, 7
 b5e:	81 91       	ld	r24, Z+
 b60:	5f 01       	movw	r10, r30
 b62:	b7 01       	movw	r22, r14
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 b6a:	31 10       	cpse	r3, r1
 b6c:	3a 94       	dec	r3
 b6e:	f1 e0       	ldi	r31, 0x01	; 1
 b70:	4f 1a       	sub	r4, r31
 b72:	51 08       	sbc	r5, r1
 b74:	41 14       	cp	r4, r1
 b76:	51 04       	cpc	r5, r1
 b78:	71 f7       	brne	.-36     	; 0xb56 <vfprintf+0x1b4>
 b7a:	e5 c0       	rjmp	.+458    	; 0xd46 <vfprintf+0x3a4>
 b7c:	84 36       	cpi	r24, 0x64	; 100
 b7e:	11 f0       	breq	.+4      	; 0xb84 <vfprintf+0x1e2>
 b80:	89 36       	cpi	r24, 0x69	; 105
 b82:	39 f5       	brne	.+78     	; 0xbd2 <vfprintf+0x230>
 b84:	f8 01       	movw	r30, r16
 b86:	27 ff       	sbrs	r18, 7
 b88:	07 c0       	rjmp	.+14     	; 0xb98 <vfprintf+0x1f6>
 b8a:	60 81       	ld	r22, Z
 b8c:	71 81       	ldd	r23, Z+1	; 0x01
 b8e:	82 81       	ldd	r24, Z+2	; 0x02
 b90:	93 81       	ldd	r25, Z+3	; 0x03
 b92:	0c 5f       	subi	r16, 0xFC	; 252
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	08 c0       	rjmp	.+16     	; 0xba8 <vfprintf+0x206>
 b98:	60 81       	ld	r22, Z
 b9a:	71 81       	ldd	r23, Z+1	; 0x01
 b9c:	88 27       	eor	r24, r24
 b9e:	77 fd       	sbrc	r23, 7
 ba0:	80 95       	com	r24
 ba2:	98 2f       	mov	r25, r24
 ba4:	0e 5f       	subi	r16, 0xFE	; 254
 ba6:	1f 4f       	sbci	r17, 0xFF	; 255
 ba8:	2f 76       	andi	r18, 0x6F	; 111
 baa:	b2 2e       	mov	r11, r18
 bac:	97 ff       	sbrs	r25, 7
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <vfprintf+0x220>
 bb0:	90 95       	com	r25
 bb2:	80 95       	com	r24
 bb4:	70 95       	com	r23
 bb6:	61 95       	neg	r22
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	20 68       	ori	r18, 0x80	; 128
 bc0:	b2 2e       	mov	r11, r18
 bc2:	2a e0       	ldi	r18, 0x0A	; 10
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	a4 01       	movw	r20, r8
 bc8:	0e 94 14 07 	call	0xe28	; 0xe28 <__ultoa_invert>
 bcc:	a8 2e       	mov	r10, r24
 bce:	a8 18       	sub	r10, r8
 bd0:	44 c0       	rjmp	.+136    	; 0xc5a <vfprintf+0x2b8>
 bd2:	85 37       	cpi	r24, 0x75	; 117
 bd4:	29 f4       	brne	.+10     	; 0xbe0 <vfprintf+0x23e>
 bd6:	2f 7e       	andi	r18, 0xEF	; 239
 bd8:	b2 2e       	mov	r11, r18
 bda:	2a e0       	ldi	r18, 0x0A	; 10
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	25 c0       	rjmp	.+74     	; 0xc2a <vfprintf+0x288>
 be0:	f2 2f       	mov	r31, r18
 be2:	f9 7f       	andi	r31, 0xF9	; 249
 be4:	bf 2e       	mov	r11, r31
 be6:	8f 36       	cpi	r24, 0x6F	; 111
 be8:	c1 f0       	breq	.+48     	; 0xc1a <vfprintf+0x278>
 bea:	18 f4       	brcc	.+6      	; 0xbf2 <vfprintf+0x250>
 bec:	88 35       	cpi	r24, 0x58	; 88
 bee:	79 f0       	breq	.+30     	; 0xc0e <vfprintf+0x26c>
 bf0:	b4 c0       	rjmp	.+360    	; 0xd5a <vfprintf+0x3b8>
 bf2:	80 37       	cpi	r24, 0x70	; 112
 bf4:	19 f0       	breq	.+6      	; 0xbfc <vfprintf+0x25a>
 bf6:	88 37       	cpi	r24, 0x78	; 120
 bf8:	21 f0       	breq	.+8      	; 0xc02 <vfprintf+0x260>
 bfa:	af c0       	rjmp	.+350    	; 0xd5a <vfprintf+0x3b8>
 bfc:	2f 2f       	mov	r18, r31
 bfe:	20 61       	ori	r18, 0x10	; 16
 c00:	b2 2e       	mov	r11, r18
 c02:	b4 fe       	sbrs	r11, 4
 c04:	0d c0       	rjmp	.+26     	; 0xc20 <vfprintf+0x27e>
 c06:	8b 2d       	mov	r24, r11
 c08:	84 60       	ori	r24, 0x04	; 4
 c0a:	b8 2e       	mov	r11, r24
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <vfprintf+0x27e>
 c0e:	24 ff       	sbrs	r18, 4
 c10:	0a c0       	rjmp	.+20     	; 0xc26 <vfprintf+0x284>
 c12:	9f 2f       	mov	r25, r31
 c14:	96 60       	ori	r25, 0x06	; 6
 c16:	b9 2e       	mov	r11, r25
 c18:	06 c0       	rjmp	.+12     	; 0xc26 <vfprintf+0x284>
 c1a:	28 e0       	ldi	r18, 0x08	; 8
 c1c:	30 e0       	ldi	r19, 0x00	; 0
 c1e:	05 c0       	rjmp	.+10     	; 0xc2a <vfprintf+0x288>
 c20:	20 e1       	ldi	r18, 0x10	; 16
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <vfprintf+0x288>
 c26:	20 e1       	ldi	r18, 0x10	; 16
 c28:	32 e0       	ldi	r19, 0x02	; 2
 c2a:	f8 01       	movw	r30, r16
 c2c:	b7 fe       	sbrs	r11, 7
 c2e:	07 c0       	rjmp	.+14     	; 0xc3e <vfprintf+0x29c>
 c30:	60 81       	ld	r22, Z
 c32:	71 81       	ldd	r23, Z+1	; 0x01
 c34:	82 81       	ldd	r24, Z+2	; 0x02
 c36:	93 81       	ldd	r25, Z+3	; 0x03
 c38:	0c 5f       	subi	r16, 0xFC	; 252
 c3a:	1f 4f       	sbci	r17, 0xFF	; 255
 c3c:	06 c0       	rjmp	.+12     	; 0xc4a <vfprintf+0x2a8>
 c3e:	60 81       	ld	r22, Z
 c40:	71 81       	ldd	r23, Z+1	; 0x01
 c42:	80 e0       	ldi	r24, 0x00	; 0
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 5f       	subi	r16, 0xFE	; 254
 c48:	1f 4f       	sbci	r17, 0xFF	; 255
 c4a:	a4 01       	movw	r20, r8
 c4c:	0e 94 14 07 	call	0xe28	; 0xe28 <__ultoa_invert>
 c50:	a8 2e       	mov	r10, r24
 c52:	a8 18       	sub	r10, r8
 c54:	fb 2d       	mov	r31, r11
 c56:	ff 77       	andi	r31, 0x7F	; 127
 c58:	bf 2e       	mov	r11, r31
 c5a:	b6 fe       	sbrs	r11, 6
 c5c:	0b c0       	rjmp	.+22     	; 0xc74 <vfprintf+0x2d2>
 c5e:	2b 2d       	mov	r18, r11
 c60:	2e 7f       	andi	r18, 0xFE	; 254
 c62:	a5 14       	cp	r10, r5
 c64:	50 f4       	brcc	.+20     	; 0xc7a <vfprintf+0x2d8>
 c66:	b4 fe       	sbrs	r11, 4
 c68:	0a c0       	rjmp	.+20     	; 0xc7e <vfprintf+0x2dc>
 c6a:	b2 fc       	sbrc	r11, 2
 c6c:	08 c0       	rjmp	.+16     	; 0xc7e <vfprintf+0x2dc>
 c6e:	2b 2d       	mov	r18, r11
 c70:	2e 7e       	andi	r18, 0xEE	; 238
 c72:	05 c0       	rjmp	.+10     	; 0xc7e <vfprintf+0x2dc>
 c74:	7a 2c       	mov	r7, r10
 c76:	2b 2d       	mov	r18, r11
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x2de>
 c7a:	7a 2c       	mov	r7, r10
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x2de>
 c7e:	75 2c       	mov	r7, r5
 c80:	24 ff       	sbrs	r18, 4
 c82:	0d c0       	rjmp	.+26     	; 0xc9e <vfprintf+0x2fc>
 c84:	fe 01       	movw	r30, r28
 c86:	ea 0d       	add	r30, r10
 c88:	f1 1d       	adc	r31, r1
 c8a:	80 81       	ld	r24, Z
 c8c:	80 33       	cpi	r24, 0x30	; 48
 c8e:	11 f4       	brne	.+4      	; 0xc94 <vfprintf+0x2f2>
 c90:	29 7e       	andi	r18, 0xE9	; 233
 c92:	09 c0       	rjmp	.+18     	; 0xca6 <vfprintf+0x304>
 c94:	22 ff       	sbrs	r18, 2
 c96:	06 c0       	rjmp	.+12     	; 0xca4 <vfprintf+0x302>
 c98:	73 94       	inc	r7
 c9a:	73 94       	inc	r7
 c9c:	04 c0       	rjmp	.+8      	; 0xca6 <vfprintf+0x304>
 c9e:	82 2f       	mov	r24, r18
 ca0:	86 78       	andi	r24, 0x86	; 134
 ca2:	09 f0       	breq	.+2      	; 0xca6 <vfprintf+0x304>
 ca4:	73 94       	inc	r7
 ca6:	23 fd       	sbrc	r18, 3
 ca8:	13 c0       	rjmp	.+38     	; 0xcd0 <vfprintf+0x32e>
 caa:	20 ff       	sbrs	r18, 0
 cac:	06 c0       	rjmp	.+12     	; 0xcba <vfprintf+0x318>
 cae:	5a 2c       	mov	r5, r10
 cb0:	73 14       	cp	r7, r3
 cb2:	18 f4       	brcc	.+6      	; 0xcba <vfprintf+0x318>
 cb4:	53 0c       	add	r5, r3
 cb6:	57 18       	sub	r5, r7
 cb8:	73 2c       	mov	r7, r3
 cba:	73 14       	cp	r7, r3
 cbc:	68 f4       	brcc	.+26     	; 0xcd8 <vfprintf+0x336>
 cbe:	b7 01       	movw	r22, r14
 cc0:	80 e2       	ldi	r24, 0x20	; 32
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	2c 87       	std	Y+12, r18	; 0x0c
 cc6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 cca:	73 94       	inc	r7
 ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
 cce:	f5 cf       	rjmp	.-22     	; 0xcba <vfprintf+0x318>
 cd0:	73 14       	cp	r7, r3
 cd2:	10 f4       	brcc	.+4      	; 0xcd8 <vfprintf+0x336>
 cd4:	37 18       	sub	r3, r7
 cd6:	01 c0       	rjmp	.+2      	; 0xcda <vfprintf+0x338>
 cd8:	31 2c       	mov	r3, r1
 cda:	24 ff       	sbrs	r18, 4
 cdc:	12 c0       	rjmp	.+36     	; 0xd02 <vfprintf+0x360>
 cde:	b7 01       	movw	r22, r14
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	2c 87       	std	Y+12, r18	; 0x0c
 ce6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 cea:	2c 85       	ldd	r18, Y+12	; 0x0c
 cec:	22 ff       	sbrs	r18, 2
 cee:	17 c0       	rjmp	.+46     	; 0xd1e <vfprintf+0x37c>
 cf0:	21 ff       	sbrs	r18, 1
 cf2:	03 c0       	rjmp	.+6      	; 0xcfa <vfprintf+0x358>
 cf4:	88 e5       	ldi	r24, 0x58	; 88
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x35c>
 cfa:	88 e7       	ldi	r24, 0x78	; 120
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	b7 01       	movw	r22, r14
 d00:	0c c0       	rjmp	.+24     	; 0xd1a <vfprintf+0x378>
 d02:	82 2f       	mov	r24, r18
 d04:	86 78       	andi	r24, 0x86	; 134
 d06:	59 f0       	breq	.+22     	; 0xd1e <vfprintf+0x37c>
 d08:	21 fd       	sbrc	r18, 1
 d0a:	02 c0       	rjmp	.+4      	; 0xd10 <vfprintf+0x36e>
 d0c:	80 e2       	ldi	r24, 0x20	; 32
 d0e:	01 c0       	rjmp	.+2      	; 0xd12 <vfprintf+0x370>
 d10:	8b e2       	ldi	r24, 0x2B	; 43
 d12:	27 fd       	sbrc	r18, 7
 d14:	8d e2       	ldi	r24, 0x2D	; 45
 d16:	b7 01       	movw	r22, r14
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 d1e:	a5 14       	cp	r10, r5
 d20:	38 f4       	brcc	.+14     	; 0xd30 <vfprintf+0x38e>
 d22:	b7 01       	movw	r22, r14
 d24:	80 e3       	ldi	r24, 0x30	; 48
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 d2c:	5a 94       	dec	r5
 d2e:	f7 cf       	rjmp	.-18     	; 0xd1e <vfprintf+0x37c>
 d30:	aa 94       	dec	r10
 d32:	f4 01       	movw	r30, r8
 d34:	ea 0d       	add	r30, r10
 d36:	f1 1d       	adc	r31, r1
 d38:	80 81       	ld	r24, Z
 d3a:	b7 01       	movw	r22, r14
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 d42:	a1 10       	cpse	r10, r1
 d44:	f5 cf       	rjmp	.-22     	; 0xd30 <vfprintf+0x38e>
 d46:	33 20       	and	r3, r3
 d48:	09 f4       	brne	.+2      	; 0xd4c <vfprintf+0x3aa>
 d4a:	51 ce       	rjmp	.-862    	; 0x9ee <vfprintf+0x4c>
 d4c:	b7 01       	movw	r22, r14
 d4e:	80 e2       	ldi	r24, 0x20	; 32
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <fputc>
 d56:	3a 94       	dec	r3
 d58:	f6 cf       	rjmp	.-20     	; 0xd46 <vfprintf+0x3a4>
 d5a:	f7 01       	movw	r30, r14
 d5c:	86 81       	ldd	r24, Z+6	; 0x06
 d5e:	97 81       	ldd	r25, Z+7	; 0x07
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <vfprintf+0x3c4>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	2c 96       	adiw	r28, 0x0c	; 12
 d68:	0f b6       	in	r0, 0x3f	; 63
 d6a:	f8 94       	cli
 d6c:	de bf       	out	0x3e, r29	; 62
 d6e:	0f be       	out	0x3f, r0	; 63
 d70:	cd bf       	out	0x3d, r28	; 61
 d72:	df 91       	pop	r29
 d74:	cf 91       	pop	r28
 d76:	1f 91       	pop	r17
 d78:	0f 91       	pop	r16
 d7a:	ff 90       	pop	r15
 d7c:	ef 90       	pop	r14
 d7e:	df 90       	pop	r13
 d80:	cf 90       	pop	r12
 d82:	bf 90       	pop	r11
 d84:	af 90       	pop	r10
 d86:	9f 90       	pop	r9
 d88:	8f 90       	pop	r8
 d8a:	7f 90       	pop	r7
 d8c:	6f 90       	pop	r6
 d8e:	5f 90       	pop	r5
 d90:	4f 90       	pop	r4
 d92:	3f 90       	pop	r3
 d94:	2f 90       	pop	r2
 d96:	08 95       	ret

00000d98 <strnlen_P>:
 d98:	fc 01       	movw	r30, r24
 d9a:	05 90       	lpm	r0, Z+
 d9c:	61 50       	subi	r22, 0x01	; 1
 d9e:	70 40       	sbci	r23, 0x00	; 0
 da0:	01 10       	cpse	r0, r1
 da2:	d8 f7       	brcc	.-10     	; 0xd9a <strnlen_P+0x2>
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	8e 0f       	add	r24, r30
 daa:	9f 1f       	adc	r25, r31
 dac:	08 95       	ret

00000dae <strnlen>:
 dae:	fc 01       	movw	r30, r24
 db0:	61 50       	subi	r22, 0x01	; 1
 db2:	70 40       	sbci	r23, 0x00	; 0
 db4:	01 90       	ld	r0, Z+
 db6:	01 10       	cpse	r0, r1
 db8:	d8 f7       	brcc	.-10     	; 0xdb0 <strnlen+0x2>
 dba:	80 95       	com	r24
 dbc:	90 95       	com	r25
 dbe:	8e 0f       	add	r24, r30
 dc0:	9f 1f       	adc	r25, r31
 dc2:	08 95       	ret

00000dc4 <fputc>:
 dc4:	0f 93       	push	r16
 dc6:	1f 93       	push	r17
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	18 2f       	mov	r17, r24
 dce:	09 2f       	mov	r16, r25
 dd0:	eb 01       	movw	r28, r22
 dd2:	8b 81       	ldd	r24, Y+3	; 0x03
 dd4:	81 fd       	sbrc	r24, 1
 dd6:	03 c0       	rjmp	.+6      	; 0xdde <fputc+0x1a>
 dd8:	8f ef       	ldi	r24, 0xFF	; 255
 dda:	9f ef       	ldi	r25, 0xFF	; 255
 ddc:	20 c0       	rjmp	.+64     	; 0xe1e <fputc+0x5a>
 dde:	82 ff       	sbrs	r24, 2
 de0:	10 c0       	rjmp	.+32     	; 0xe02 <fputc+0x3e>
 de2:	4e 81       	ldd	r20, Y+6	; 0x06
 de4:	5f 81       	ldd	r21, Y+7	; 0x07
 de6:	2c 81       	ldd	r18, Y+4	; 0x04
 de8:	3d 81       	ldd	r19, Y+5	; 0x05
 dea:	42 17       	cp	r20, r18
 dec:	53 07       	cpc	r21, r19
 dee:	7c f4       	brge	.+30     	; 0xe0e <fputc+0x4a>
 df0:	e8 81       	ld	r30, Y
 df2:	f9 81       	ldd	r31, Y+1	; 0x01
 df4:	9f 01       	movw	r18, r30
 df6:	2f 5f       	subi	r18, 0xFF	; 255
 df8:	3f 4f       	sbci	r19, 0xFF	; 255
 dfa:	39 83       	std	Y+1, r19	; 0x01
 dfc:	28 83       	st	Y, r18
 dfe:	10 83       	st	Z, r17
 e00:	06 c0       	rjmp	.+12     	; 0xe0e <fputc+0x4a>
 e02:	e8 85       	ldd	r30, Y+8	; 0x08
 e04:	f9 85       	ldd	r31, Y+9	; 0x09
 e06:	81 2f       	mov	r24, r17
 e08:	19 95       	eicall
 e0a:	89 2b       	or	r24, r25
 e0c:	29 f7       	brne	.-54     	; 0xdd8 <fputc+0x14>
 e0e:	2e 81       	ldd	r18, Y+6	; 0x06
 e10:	3f 81       	ldd	r19, Y+7	; 0x07
 e12:	2f 5f       	subi	r18, 0xFF	; 255
 e14:	3f 4f       	sbci	r19, 0xFF	; 255
 e16:	3f 83       	std	Y+7, r19	; 0x07
 e18:	2e 83       	std	Y+6, r18	; 0x06
 e1a:	81 2f       	mov	r24, r17
 e1c:	90 2f       	mov	r25, r16
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	08 95       	ret

00000e28 <__ultoa_invert>:
 e28:	fa 01       	movw	r30, r20
 e2a:	aa 27       	eor	r26, r26
 e2c:	28 30       	cpi	r18, 0x08	; 8
 e2e:	51 f1       	breq	.+84     	; 0xe84 <__ultoa_invert+0x5c>
 e30:	20 31       	cpi	r18, 0x10	; 16
 e32:	81 f1       	breq	.+96     	; 0xe94 <__ultoa_invert+0x6c>
 e34:	e8 94       	clt
 e36:	6f 93       	push	r22
 e38:	6e 7f       	andi	r22, 0xFE	; 254
 e3a:	6e 5f       	subi	r22, 0xFE	; 254
 e3c:	7f 4f       	sbci	r23, 0xFF	; 255
 e3e:	8f 4f       	sbci	r24, 0xFF	; 255
 e40:	9f 4f       	sbci	r25, 0xFF	; 255
 e42:	af 4f       	sbci	r26, 0xFF	; 255
 e44:	b1 e0       	ldi	r27, 0x01	; 1
 e46:	3e d0       	rcall	.+124    	; 0xec4 <__ultoa_invert+0x9c>
 e48:	b4 e0       	ldi	r27, 0x04	; 4
 e4a:	3c d0       	rcall	.+120    	; 0xec4 <__ultoa_invert+0x9c>
 e4c:	67 0f       	add	r22, r23
 e4e:	78 1f       	adc	r23, r24
 e50:	89 1f       	adc	r24, r25
 e52:	9a 1f       	adc	r25, r26
 e54:	a1 1d       	adc	r26, r1
 e56:	68 0f       	add	r22, r24
 e58:	79 1f       	adc	r23, r25
 e5a:	8a 1f       	adc	r24, r26
 e5c:	91 1d       	adc	r25, r1
 e5e:	a1 1d       	adc	r26, r1
 e60:	6a 0f       	add	r22, r26
 e62:	71 1d       	adc	r23, r1
 e64:	81 1d       	adc	r24, r1
 e66:	91 1d       	adc	r25, r1
 e68:	a1 1d       	adc	r26, r1
 e6a:	20 d0       	rcall	.+64     	; 0xeac <__ultoa_invert+0x84>
 e6c:	09 f4       	brne	.+2      	; 0xe70 <__ultoa_invert+0x48>
 e6e:	68 94       	set
 e70:	3f 91       	pop	r19
 e72:	2a e0       	ldi	r18, 0x0A	; 10
 e74:	26 9f       	mul	r18, r22
 e76:	11 24       	eor	r1, r1
 e78:	30 19       	sub	r19, r0
 e7a:	30 5d       	subi	r19, 0xD0	; 208
 e7c:	31 93       	st	Z+, r19
 e7e:	de f6       	brtc	.-74     	; 0xe36 <__ultoa_invert+0xe>
 e80:	cf 01       	movw	r24, r30
 e82:	08 95       	ret
 e84:	46 2f       	mov	r20, r22
 e86:	47 70       	andi	r20, 0x07	; 7
 e88:	40 5d       	subi	r20, 0xD0	; 208
 e8a:	41 93       	st	Z+, r20
 e8c:	b3 e0       	ldi	r27, 0x03	; 3
 e8e:	0f d0       	rcall	.+30     	; 0xeae <__ultoa_invert+0x86>
 e90:	c9 f7       	brne	.-14     	; 0xe84 <__ultoa_invert+0x5c>
 e92:	f6 cf       	rjmp	.-20     	; 0xe80 <__ultoa_invert+0x58>
 e94:	46 2f       	mov	r20, r22
 e96:	4f 70       	andi	r20, 0x0F	; 15
 e98:	40 5d       	subi	r20, 0xD0	; 208
 e9a:	4a 33       	cpi	r20, 0x3A	; 58
 e9c:	18 f0       	brcs	.+6      	; 0xea4 <__ultoa_invert+0x7c>
 e9e:	49 5d       	subi	r20, 0xD9	; 217
 ea0:	31 fd       	sbrc	r19, 1
 ea2:	40 52       	subi	r20, 0x20	; 32
 ea4:	41 93       	st	Z+, r20
 ea6:	02 d0       	rcall	.+4      	; 0xeac <__ultoa_invert+0x84>
 ea8:	a9 f7       	brne	.-22     	; 0xe94 <__ultoa_invert+0x6c>
 eaa:	ea cf       	rjmp	.-44     	; 0xe80 <__ultoa_invert+0x58>
 eac:	b4 e0       	ldi	r27, 0x04	; 4
 eae:	a6 95       	lsr	r26
 eb0:	97 95       	ror	r25
 eb2:	87 95       	ror	r24
 eb4:	77 95       	ror	r23
 eb6:	67 95       	ror	r22
 eb8:	ba 95       	dec	r27
 eba:	c9 f7       	brne	.-14     	; 0xeae <__ultoa_invert+0x86>
 ebc:	00 97       	sbiw	r24, 0x00	; 0
 ebe:	61 05       	cpc	r22, r1
 ec0:	71 05       	cpc	r23, r1
 ec2:	08 95       	ret
 ec4:	9b 01       	movw	r18, r22
 ec6:	ac 01       	movw	r20, r24
 ec8:	0a 2e       	mov	r0, r26
 eca:	06 94       	lsr	r0
 ecc:	57 95       	ror	r21
 ece:	47 95       	ror	r20
 ed0:	37 95       	ror	r19
 ed2:	27 95       	ror	r18
 ed4:	ba 95       	dec	r27
 ed6:	c9 f7       	brne	.-14     	; 0xeca <__ultoa_invert+0xa2>
 ed8:	62 0f       	add	r22, r18
 eda:	73 1f       	adc	r23, r19
 edc:	84 1f       	adc	r24, r20
 ede:	95 1f       	adc	r25, r21
 ee0:	a0 1d       	adc	r26, r0
 ee2:	08 95       	ret

00000ee4 <_exit>:
 ee4:	f8 94       	cli

00000ee6 <__stop_program>:
 ee6:	ff cf       	rjmp	.-2      	; 0xee6 <__stop_program>
