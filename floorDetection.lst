   1               		.file	"floorDetection.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	floorDetection
  13               	floorDetection:
  14               	.LFB1:
  15               		.file 1 "floorDetection.c"
   1:floorDetection.c **** #include "roomba.h"
   2:floorDetection.c **** #include "tools.h"
   3:floorDetection.c **** #include "usart.h"
   4:floorDetection.c **** #include <stdio.h>
   5:floorDetection.c **** #include <stdlib.h>
   6:floorDetection.c **** #include "floorDetection.h"
   7:floorDetection.c **** 
   8:floorDetection.c **** /**
   9:floorDetection.c ****  * Possible return values: 
  10:floorDetection.c ****  * 	power up detected
  11:floorDetection.c ****  * 	left border detected with angle
  12:floorDetection.c ****  * 	right border detected with angle
  13:floorDetection.c ****  */
  14:floorDetection.c **** void floorDetection(detectedType *type, uint16_t *sensorData) {
  16               		.loc 1 14 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FB01      		movw r30,r22
  24               	.LVL1:
  15:floorDetection.c **** 	int16_t cliff_front_left = sensorData[0];
  16:floorDetection.c **** 	int16_t cliff_front_right = sensorData[1];
  17:floorDetection.c **** 	
  18:floorDetection.c **** 	// Power up
  19:floorDetection.c **** 	if (cliff_front_left + cliff_front_right > POWER_UP_CLIFF_THRESHOLD) {
  25               		.loc 1 19 0
  26 0002 4081      		ld r20,Z
  27 0004 5181      		ldd r21,Z+1
  28 0006 2281      		ldd r18,Z+2
  29 0008 3381      		ldd r19,Z+3
  30 000a 240F      		add r18,r20
  31 000c 351F      		adc r19,r21
  32 000e 253C      		cpi r18,-59
  33 0010 3940      		sbci r19,9
  34 0012 04F0      		brlt .L2
  20:floorDetection.c **** 		*type = POWER_UP;
  35               		.loc 1 20 0
  36 0014 FC01      		movw r30,r24
  37 0016 1082      		st Z,__zero_reg__
  38               	.LVL2:
  21:floorDetection.c **** 		
  22:floorDetection.c **** 		return;
  39               		.loc 1 22 0
  40 0018 0895      		ret
  41               	.LVL3:
  42               	.L2:
  23:floorDetection.c **** 	}
  24:floorDetection.c **** 	
  25:floorDetection.c **** 	int16_t cliff_left = sensorData[2];
  26:floorDetection.c **** 	int16_t cliff_right = sensorData[3];
  43               		.loc 1 26 0
  44 001a 4681      		ldd r20,Z+6
  45 001c 5781      		ldd r21,Z+7
  46               	.LVL4:
  27:floorDetection.c **** 	
  28:floorDetection.c **** 	// Left border
  29:floorDetection.c **** 	if (cliff_left > BORDER_CLIFF_THRESHOLD) {
  47               		.loc 1 29 0
  48 001e 2481      		ldd r18,Z+4
  49 0020 3581      		ldd r19,Z+5
  50 0022 253C      		cpi r18,-59
  51 0024 3940      		sbci r19,9
  52 0026 04F0      		brlt .L4
  30:floorDetection.c **** 		// Left sensor is on border
  31:floorDetection.c **** 		/*char result[4];
  32:floorDetection.c **** 		intToHex(cliff_left, result);
  33:floorDetection.c **** 		set_Display(result);*/
  34:floorDetection.c **** 		
  35:floorDetection.c **** 		*type = BORDER_LEFT;
  53               		.loc 1 35 0
  54 0028 21E0      		ldi r18,lo8(1)
  55 002a FC01      		movw r30,r24
  56 002c 2083      		st Z,r18
  57               	.LVL5:
  36:floorDetection.c **** 		
  37:floorDetection.c **** 		return;
  58               		.loc 1 37 0
  59 002e 0895      		ret
  60               	.LVL6:
  61               	.L4:
  38:floorDetection.c **** 	} else if (cliff_right > BORDER_CLIFF_THRESHOLD) {
  62               		.loc 1 38 0
  63 0030 453C      		cpi r20,-59
  64 0032 5940      		sbci r21,9
  65 0034 04F0      		brlt .L5
  39:floorDetection.c **** 		/*char result[4];
  40:floorDetection.c **** 		intToHex(cliff_left, result);
  41:floorDetection.c **** 		set_Display(result);*/
  42:floorDetection.c **** 		
  43:floorDetection.c **** 		*type = BORDER_RIGHT;
  66               		.loc 1 43 0
  67 0036 22E0      		ldi r18,lo8(2)
  68               	.LVL7:
  69 0038 FC01      		movw r30,r24
  70 003a 2083      		st Z,r18
  71               	.LVL8:
  44:floorDetection.c **** 		
  45:floorDetection.c **** 		return;
  72               		.loc 1 45 0
  73 003c 0895      		ret
  74               	.LVL9:
  75               	.L5:
  46:floorDetection.c **** 	}
  47:floorDetection.c **** 	
  48:floorDetection.c **** 	*type = NO_TYPE;
  76               		.loc 1 48 0
  77 003e 23E0      		ldi r18,lo8(3)
  78               	.LVL10:
  79 0040 FC01      		movw r30,r24
  80 0042 2083      		st Z,r18
  81               	.LVL11:
  82 0044 0895      		ret
  83               		.cfi_endproc
  84               	.LFE1:
  86               	.Letext0:
  87               		.file 2 "/usr/lib/avr/include/stdint.h"
  88               		.file 3 "floorDetection.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 floorDetection.c
     /tmp/cc1YaTf4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1YaTf4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1YaTf4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1YaTf4.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc1YaTf4.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1YaTf4.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1YaTf4.s:13     .text:0000000000000000 floorDetection

NO UNDEFINED SYMBOLS
