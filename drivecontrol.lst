   1               		.file	"drivecontrol.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	drive_direction
  13               	drive_direction:
  14               	.LFB2:
  15               		.file 1 "drivecontrol.c"
   1:drivecontrol.c **** #include "roomba.h"
   2:drivecontrol.c **** #include "tools.h"
   3:drivecontrol.c **** #include "usart.h"
   4:drivecontrol.c **** #include <stdio.h>
   5:drivecontrol.c **** #include <stdlib.h>
   6:drivecontrol.c **** #include "remotecontrol.h"
   7:drivecontrol.c **** #include "drivecontrol.h"
   8:drivecontrol.c **** 
   9:drivecontrol.c **** /**
  10:drivecontrol.c ****  * \brief TODO
  11:drivecontrol.c ****  */
  12:drivecontrol.c **** void getCommand(remoteSignal type, int16_t * actVel_right,int16_t * actVel_left) {
  13:drivecontrol.c **** 	if (type == RACCELERATE) {
  14:drivecontrol.c **** 		*actVel_right=*actVel_right + ACC_BRAKE_CONSTANT;
  15:drivecontrol.c **** 		*actVel_left=*actVel_left + ACC_BRAKE_CONSTANT; 
  16:drivecontrol.c **** 	} else if (type == RBRAKE) {
  17:drivecontrol.c **** 		*actVel_right=*actVel_right - ACC_BRAKE_CONSTANT;
  18:drivecontrol.c **** 		*actVel_left=*actVel_left - ACC_BRAKE_CONSTANT; 
  19:drivecontrol.c **** 	} else if (type == RLEFT) {
  20:drivecontrol.c **** 		*actVel_right=*actVel_right + ACC_BRAKE_CONSTANT;
  21:drivecontrol.c **** 		*actVel_left=*actVel_left - ACC_BRAKE_CONSTANT;  
  22:drivecontrol.c **** 	} else if (type == RRIGHT) {
  23:drivecontrol.c **** 		*actVel_right=*actVel_right - ACC_BRAKE_CONSTANT;
  24:drivecontrol.c **** 		*actVel_left=*actVel_left + ACC_BRAKE_CONSTANT; 
  25:drivecontrol.c **** 	}
  26:drivecontrol.c **** 	
  27:drivecontrol.c **** 	drive_direction(*actVel_right, *actVel_left);
  28:drivecontrol.c **** }
  29:drivecontrol.c **** 
  30:drivecontrol.c **** /**
  31:drivecontrol.c ****  * \brief Drive and have the posibility to drive a corner
  32:drivecontrol.c ****  * 
  33:drivecontrol.c ****  * \param velocity_right
  34:drivecontrol.c ****  * \param velocity_left
  35:drivecontrol.c ****  */
  36:drivecontrol.c **** void drive_direction(int16_t velocity_right, int16_t velocity_left) {
  16               		.loc 1 36 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 16, -3
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 17, -4
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30               		.cfi_offset 28, -5
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 7
  34               		.cfi_offset 29, -6
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 182F      		mov r17,r24
  40 000a 092F      		mov r16,r25
  41 000c C62F      		mov r28,r22
  42 000e D72F      		mov r29,r23
  37:drivecontrol.c **** 	send_byte_roomba(145);
  43               		.loc 1 37 0
  44 0010 81E9      		ldi r24,lo8(-111)
  45               	.LVL1:
  46 0012 0E94 0000 		call send_byte_roomba
  47               	.LVL2:
  38:drivecontrol.c **** 	
  39:drivecontrol.c **** 	uint8_t low = velocity_right;
  40:drivecontrol.c **** 	uint8_t high = (velocity_right >> 8);
  41:drivecontrol.c **** 	
  42:drivecontrol.c **** 	send_byte_roomba(high);
  48               		.loc 1 42 0
  49 0016 802F      		mov r24,r16
  50 0018 0E94 0000 		call send_byte_roomba
  51               	.LVL3:
  43:drivecontrol.c **** 	send_byte_roomba(low);
  52               		.loc 1 43 0
  53 001c 812F      		mov r24,r17
  54 001e 0E94 0000 		call send_byte_roomba
  55               	.LVL4:
  44:drivecontrol.c **** 	
  45:drivecontrol.c **** 	low = velocity_left;
  46:drivecontrol.c **** 	high = (velocity_left >> 8);
  47:drivecontrol.c **** 	
  48:drivecontrol.c **** 	send_byte_roomba(high);
  56               		.loc 1 48 0
  57 0022 8D2F      		mov r24,r29
  58 0024 0E94 0000 		call send_byte_roomba
  59               	.LVL5:
  49:drivecontrol.c **** 	send_byte_roomba(low);
  60               		.loc 1 49 0
  61 0028 8C2F      		mov r24,r28
  62 002a 0E94 0000 		call send_byte_roomba
  63               	.LVL6:
  64               	/* epilogue start */
  50:drivecontrol.c **** }
  65               		.loc 1 50 0
  66 002e DF91      		pop r29
  67               	.LVL7:
  68 0030 CF91      		pop r28
  69               	.LVL8:
  70 0032 1F91      		pop r17
  71 0034 0F91      		pop r16
  72 0036 0895      		ret
  73               		.cfi_endproc
  74               	.LFE2:
  76               	.global	getCommand
  78               	getCommand:
  79               	.LFB1:
  12:drivecontrol.c **** void getCommand(remoteSignal type, int16_t * actVel_right,int16_t * actVel_left) {
  80               		.loc 1 12 0
  81               		.cfi_startproc
  82               	.LVL9:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87 0038 FB01      		movw r30,r22
  88 003a DA01      		movw r26,r20
  13:drivecontrol.c **** 	if (type == RACCELERATE) {
  89               		.loc 1 13 0
  90 003c 8111      		cpse r24,__zero_reg__
  91 003e 00C0      		rjmp .L3
  14:drivecontrol.c **** 		*actVel_right=*actVel_right + ACC_BRAKE_CONSTANT;
  92               		.loc 1 14 0
  93 0040 8081      		ld r24,Z
  94 0042 9181      		ldd r25,Z+1
  95               	.LVL10:
  96 0044 805B      		subi r24,-80
  97 0046 9F4F      		sbci r25,-1
  98 0048 9183      		std Z+1,r25
  99 004a 8083      		st Z,r24
  15:drivecontrol.c **** 		*actVel_left=*actVel_left + ACC_BRAKE_CONSTANT; 
 100               		.loc 1 15 0
 101 004c 8D91      		ld r24,X+
 102 004e 9C91      		ld r25,X
 103 0050 1197      		sbiw r26,1
 104 0052 805B      		subi r24,-80
 105 0054 9F4F      		sbci r25,-1
 106 0056 1196      		adiw r26,1
 107 0058 9C93      		st X,r25
 108 005a 8E93      		st -X,r24
 109 005c 00C0      		rjmp .L4
 110               	.LVL11:
 111               	.L3:
  16:drivecontrol.c **** 	} else if (type == RBRAKE) {
 112               		.loc 1 16 0
 113 005e 8130      		cpi r24,lo8(1)
 114 0060 01F4      		brne .L5
  17:drivecontrol.c **** 		*actVel_right=*actVel_right - ACC_BRAKE_CONSTANT;
 115               		.loc 1 17 0
 116 0062 8081      		ld r24,Z
 117 0064 9181      		ldd r25,Z+1
 118               	.LVL12:
 119 0066 8055      		subi r24,80
 120 0068 9109      		sbc r25,__zero_reg__
 121 006a 9183      		std Z+1,r25
 122 006c 8083      		st Z,r24
  18:drivecontrol.c **** 		*actVel_left=*actVel_left - ACC_BRAKE_CONSTANT; 
 123               		.loc 1 18 0
 124 006e 8D91      		ld r24,X+
 125 0070 9C91      		ld r25,X
 126 0072 1197      		sbiw r26,1
 127 0074 8055      		subi r24,80
 128 0076 9109      		sbc r25,__zero_reg__
 129 0078 1196      		adiw r26,1
 130 007a 9C93      		st X,r25
 131 007c 8E93      		st -X,r24
 132 007e 00C0      		rjmp .L4
 133               	.LVL13:
 134               	.L5:
  19:drivecontrol.c **** 	} else if (type == RLEFT) {
 135               		.loc 1 19 0
 136 0080 8230      		cpi r24,lo8(2)
 137 0082 01F4      		brne .L6
  20:drivecontrol.c **** 		*actVel_right=*actVel_right + ACC_BRAKE_CONSTANT;
 138               		.loc 1 20 0
 139 0084 8081      		ld r24,Z
 140 0086 9181      		ldd r25,Z+1
 141               	.LVL14:
 142 0088 805B      		subi r24,-80
 143 008a 9F4F      		sbci r25,-1
 144 008c 9183      		std Z+1,r25
 145 008e 8083      		st Z,r24
  21:drivecontrol.c **** 		*actVel_left=*actVel_left - ACC_BRAKE_CONSTANT;  
 146               		.loc 1 21 0
 147 0090 8D91      		ld r24,X+
 148 0092 9C91      		ld r25,X
 149 0094 1197      		sbiw r26,1
 150 0096 8055      		subi r24,80
 151 0098 9109      		sbc r25,__zero_reg__
 152 009a 1196      		adiw r26,1
 153 009c 9C93      		st X,r25
 154 009e 8E93      		st -X,r24
 155 00a0 00C0      		rjmp .L4
 156               	.LVL15:
 157               	.L6:
  22:drivecontrol.c **** 	} else if (type == RRIGHT) {
 158               		.loc 1 22 0
 159 00a2 8330      		cpi r24,lo8(3)
 160 00a4 01F4      		brne .L4
  23:drivecontrol.c **** 		*actVel_right=*actVel_right - ACC_BRAKE_CONSTANT;
 161               		.loc 1 23 0
 162 00a6 8081      		ld r24,Z
 163 00a8 9181      		ldd r25,Z+1
 164               	.LVL16:
 165 00aa 8055      		subi r24,80
 166 00ac 9109      		sbc r25,__zero_reg__
 167 00ae 9183      		std Z+1,r25
 168 00b0 8083      		st Z,r24
  24:drivecontrol.c **** 		*actVel_left=*actVel_left + ACC_BRAKE_CONSTANT; 
 169               		.loc 1 24 0
 170 00b2 8D91      		ld r24,X+
 171 00b4 9C91      		ld r25,X
 172 00b6 1197      		sbiw r26,1
 173 00b8 805B      		subi r24,-80
 174 00ba 9F4F      		sbci r25,-1
 175 00bc 1196      		adiw r26,1
 176 00be 9C93      		st X,r25
 177 00c0 8E93      		st -X,r24
 178               	.L4:
  27:drivecontrol.c **** 	drive_direction(*actVel_right, *actVel_left);
 179               		.loc 1 27 0
 180 00c2 6D91      		ld r22,X+
 181 00c4 7C91      		ld r23,X
 182               	.LVL17:
 183 00c6 8081      		ld r24,Z
 184 00c8 9181      		ldd r25,Z+1
 185 00ca 0E94 0000 		call drive_direction
 186               	.LVL18:
 187 00ce 0895      		ret
 188               		.cfi_endproc
 189               	.LFE1:
 191               	.Letext0:
 192               		.file 2 "/usr/lib/avr/include/stdint.h"
 193               		.file 3 "remotecontrol.h"
 194               		.file 4 "usart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 drivecontrol.c
     /tmp/ccxZd5Aj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxZd5Aj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxZd5Aj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxZd5Aj.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccxZd5Aj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxZd5Aj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxZd5Aj.s:13     .text:0000000000000000 drive_direction
     /tmp/ccxZd5Aj.s:78     .text:0000000000000038 getCommand

UNDEFINED SYMBOLS
send_byte_roomba
